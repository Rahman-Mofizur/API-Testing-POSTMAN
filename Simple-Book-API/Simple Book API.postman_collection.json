{
	"info": {
		"_postman_id": "8f36c499-c26d-4f3a-bd35-9e4b244c19b7",
		"name": "Simple Book API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27236938",
		"_collection_link": "https://lively-shadow-838112.postman.co/workspace/Flight-Combo~fa5cb92d-7997-45bd-a561-33cc2537ee40/collection/27236938-8f36c499-c26d-4f3a-bd35-9e4b244c19b7?action=share&creator=27236938&source=collection_link"
	},
	"item": [
		{
			"name": "API Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);  // Means: Expected code is 200\r",
							"});\r",
							"\r",
							"// Putting Json respons into a constant variable named result.\r",
							"const result = pm.response.json();\r",
							"\r",
							"// Tells us the value of json response\r",
							"console.log(result);\r",
							"console.log(result.status);\r",
							"console.log(result['status']);\r",
							"\r",
							"// Another test that shows us The Exapted result eqls to or not to the actual result\r",
							"pm.test(\"Status should be OK\", function(){\r",
							"    pm.expect(result.status).to.eql(\"OK\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/status",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "List of Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);  // Means: Expected code is 200\r",
							"});\r",
							"\r",
							"// OR, you can define a function like that:\r",
							"pm.test(\"Status code is 200\", ()=> {\r",
							"    pm.response.to.have.status(200);  // Means: Expected code is 200\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"console.log(jsonData); // Gives output in console\r",
							"\r",
							"// All the information are in the array. So do this to have a single id and name.\r",
							"// Starting array from 0. Here array[1] = 2nd no user.\r",
							"console.log(jsonData[0]);\r",
							"console.log(jsonData[0].id,jsonData[0].name);\r",
							"\r",
							"// Not Accepting ( not available non-fiction books )\r",
							" const fictionBook = jsonData.filter((book)=> book.available === true);\r",
							" console.log(fictionBook);\r",
							"console.log(fictionBook[3]);\r",
							"\r",
							"const book = fictionBook[3];\r",
							"\r",
							"// Testing declared constant variable 'book' is an object or not!\r",
							"pm.test(\"Book is an object\", ()=> {\r",
							"    pm.expect(book).to.be.an('object');\r",
							"});\r",
							"\r",
							"// Testing book is available or not\r",
							"pm.test(\"Book Available\", ()=>{\r",
							"    pm.expect(book.available).to.be.true;\r",
							"})\r",
							"\r",
							"// Another way:\r",
							"pm.test(\"Book Available\", ()=>{\r",
							"    pm.expect(book.available).to.eql(true);\r",
							"})\r",
							"\r",
							"pm.test(\"The books are Fiction-type book\", ()=> {\r",
							"    pm.expect(book.type).to.eql(\"fiction\");\r",
							"});\r",
							"\r",
							"pm.globals.set(\"bookId\", fictionBook[3].id);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/books/?type=fiction",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"books",
						""
					],
					"query": [
						{
							"key": "type",
							"value": "fiction"
						},
						{
							"key": "limit",
							"value": "20",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Single Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);  // Means: Expected code is 200\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/books/:id",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"books",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Order Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Actual result is 201 [Created] for POST method\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);   // Means: Expected code is 200\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);   // Means: Expected code is 201\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 4,\r\n  \"customerName\": \"{{$randomFullName}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/orders",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Book Orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);   // Means: Expected code is 200\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/orders/",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"orders",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Single Book Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);   // Means: Expected code is 200\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/orders/:id",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"orders",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{orderid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a Book Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);   // Means: Expected code is 200\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/orders/:id",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"orders",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{orderid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);   // Means: Expected code is 200\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/orders/:id",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"orders",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{orderid}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register API Client",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);   // Means: Expected code is 200\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"Eiman5\",\r\n   \"clientEmail\": \"Eiman12345@example.com\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/api-clients/",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"api-clients",
						""
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseURL",
			"value": "https://simple-books-api.glitch.me"
		},
		{
			"key": "accessToken",
			"value": "---",
			"type": "string"
		}
	]
}